"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
from ..shared import shiprequirements as shared_shiprequirements
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from spacetraders import utils
from typing import Optional

class ShipModuleSymbol(str, Enum):
    MODULE_MINERAL_PROCESSOR_I = 'MODULE_MINERAL_PROCESSOR_I'
    MODULE_CARGO_HOLD_I = 'MODULE_CARGO_HOLD_I'
    MODULE_CREW_QUARTERS_I = 'MODULE_CREW_QUARTERS_I'
    MODULE_ENVOY_QUARTERS_I = 'MODULE_ENVOY_QUARTERS_I'
    MODULE_PASSENGER_CABIN_I = 'MODULE_PASSENGER_CABIN_I'
    MODULE_MICRO_REFINERY_I = 'MODULE_MICRO_REFINERY_I'
    MODULE_ORE_REFINERY_I = 'MODULE_ORE_REFINERY_I'
    MODULE_FUEL_REFINERY_I = 'MODULE_FUEL_REFINERY_I'
    MODULE_SCIENCE_LAB_I = 'MODULE_SCIENCE_LAB_I'
    MODULE_JUMP_DRIVE_I = 'MODULE_JUMP_DRIVE_I'
    MODULE_JUMP_DRIVE_II = 'MODULE_JUMP_DRIVE_II'
    MODULE_JUMP_DRIVE_III = 'MODULE_JUMP_DRIVE_III'
    MODULE_WARP_DRIVE_I = 'MODULE_WARP_DRIVE_I'
    MODULE_WARP_DRIVE_II = 'MODULE_WARP_DRIVE_II'
    MODULE_WARP_DRIVE_III = 'MODULE_WARP_DRIVE_III'
    MODULE_SHIELD_GENERATOR_I = 'MODULE_SHIELD_GENERATOR_I'
    MODULE_SHIELD_GENERATOR_II = 'MODULE_SHIELD_GENERATOR_II'


@dataclass_json(undefined=Undefined.EXCLUDE)
@dataclasses.dataclass
class ShipModule:
    r"""A module can be installed in a ship and provides a set of capabilities such as storage space or quarters for crew. Module installations are permanent."""
    
    name: str = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('name') }})
    requirements: shared_shiprequirements.ShipRequirements = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('requirements') }})
    r"""The requirements for installation on a ship"""
    symbol: ShipModuleSymbol = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('symbol') }})
    capacity: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('capacity'), 'exclude': lambda f: f is None }})
    description: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('description'), 'exclude': lambda f: f is None }})
    range: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('range'), 'exclude': lambda f: f is None }})
    