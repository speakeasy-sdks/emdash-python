"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

from __future__ import annotations
import dataclasses
import requests as requests_http
from ..shared import cooldown as shared_cooldown
from ..shared import shipcargo as shared_shipcargo
from dataclasses_json import Undefined, dataclass_json
from enum import Enum
from spacetraders import utils
from typing import Optional



@dataclasses.dataclass
class ShipRefineSecurity:
    agent_token: str = dataclasses.field(metadata={'security': { 'scheme': True, 'type': 'http', 'sub_type': 'bearer', 'field_name': 'Authorization' }})
    


class ShipRefineRequestBodyProduce(str, Enum):
    IRON = 'IRON'
    COPPER = 'COPPER'
    SILVER = 'SILVER'
    GOLD = 'GOLD'
    ALUMINUM = 'ALUMINUM'
    PLATINUM = 'PLATINUM'
    URANITE = 'URANITE'
    MERITIUM = 'MERITIUM'
    FUEL = 'FUEL'


@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ShipRefineRequestBody:
    produce: ShipRefineRequestBodyProduce = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('produce') }})
    




@dataclasses.dataclass
class ShipRefineRequest:
    ship_symbol: str = dataclasses.field(metadata={'path_param': { 'field_name': 'shipSymbol', 'style': 'simple', 'explode': False }})
    r"""The symbol of the ship"""
    request_body: Optional[ShipRefineRequestBody] = dataclasses.field(default=None, metadata={'request': { 'media_type': 'application/json' }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ShipRefineShipRefine200ResponseDataConsumed:
    trade_symbol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tradeSymbol'), 'exclude': lambda f: f is None }})
    units: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ShipRefineShipRefine200ResponseDataProduced:
    trade_symbol: Optional[str] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('tradeSymbol'), 'exclude': lambda f: f is None }})
    units: Optional[int] = dataclasses.field(default=None, metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('units'), 'exclude': lambda f: f is None }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ShipRefineShipRefine200ResponseData:
    cargo: shared_shipcargo.ShipCargo = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cargo') }})
    consumed: list[ShipRefineShipRefine200ResponseDataConsumed] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('consumed') }})
    cooldown: shared_cooldown.Cooldown = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('cooldown') }})
    r"""A cooldown is a period of time in which a ship cannot perform certain actions."""
    produced: list[ShipRefineShipRefine200ResponseDataProduced] = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('produced') }})
    



@dataclass_json(undefined=Undefined.EXCLUDE)

@dataclasses.dataclass
class ShipRefineShipRefine200Response:
    r"""The ship has successfully started refining."""
    data: ShipRefineShipRefine200ResponseData = dataclasses.field(metadata={'dataclasses_json': { 'letter_case': utils.get_field_name('data') }})
    




@dataclasses.dataclass
class ShipRefineResponse:
    content_type: str = dataclasses.field()
    status_code: int = dataclasses.field()
    raw_response: Optional[requests_http.Response] = dataclasses.field(default=None)
    ship_refine_200_response: Optional[ShipRefineShipRefine200Response] = dataclasses.field(default=None)
    r"""The ship has successfully started refining."""
    

