"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from spacetraders.models import operations
from typing import Optional

class Factions:
    r"""Factions"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def get_faction(self, request: operations.GetFactionRequest) -> operations.GetFactionResponse:
        r"""Get Faction
        View the details of a faction.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetFactionRequest, base_url, '/factions/{factionSymbol}', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFactionResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetFaction200ApplicationJSON])
                res.get_faction_200_application_json_object = out

        return res

    
    def get_factions(self, request: operations.GetFactionsRequest) -> operations.GetFactionsResponse:
        r"""List Factions
        List all discovered factions in the game.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/factions'
        headers = {}
        query_params = utils.get_query_params(operations.GetFactionsRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetFactionsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetFactions200ApplicationJSON])
                res.get_factions_200_application_json_object = out

        return res

    