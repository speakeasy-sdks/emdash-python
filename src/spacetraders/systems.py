"""Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT."""

import requests as requests_http
from . import utils
from spacetraders.models import operations
from typing import Optional

class Systems:
    r"""Systems"""
    _client: requests_http.Session
    _security_client: requests_http.Session
    _server_url: str
    _language: str
    _sdk_version: str
    _gen_version: str

    def __init__(self, client: requests_http.Session, security_client: requests_http.Session, server_url: str, language: str, sdk_version: str, gen_version: str) -> None:
        self._client = client
        self._security_client = security_client
        self._server_url = server_url
        self._language = language
        self._sdk_version = sdk_version
        self._gen_version = gen_version
        
    
    def get_jump_gate(self, request: operations.GetJumpGateRequest) -> operations.GetJumpGateResponse:
        r"""Get Jump Gate
        Get jump gate details for a waypoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetJumpGateRequest, base_url, '/systems/{systemSymbol}/waypoints/{waypointSymbol}/jump-gate', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetJumpGateResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetJumpGate200ApplicationJSON])
                res.get_jump_gate_200_application_json_object = out

        return res

    
    def get_market(self, request: operations.GetMarketRequest) -> operations.GetMarketResponse:
        r"""Get Market
        Retrieve imports, exports and exchange data from a marketplace. Imports can be sold, exports can be purchased, and exchange goods can be purchased or sold. Send a ship to the waypoint to access trade good prices and recent transactions.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetMarketRequest, base_url, '/systems/{systemSymbol}/waypoints/{waypointSymbol}/market', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetMarketResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetMarket200ApplicationJSON])
                res.get_market_200_application_json_object = out

        return res

    
    def get_shipyard(self, request: operations.GetShipyardRequest) -> operations.GetShipyardResponse:
        r"""Get Shipyard
        Get the shipyard for a waypoint. Send a ship to the waypoint to access ships that are currently available for purchase and recent transactions.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetShipyardRequest, base_url, '/systems/{systemSymbol}/waypoints/{waypointSymbol}/shipyard', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetShipyardResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetShipyard200ApplicationJSON])
                res.get_shipyard_200_application_json_object = out

        return res

    
    def get_system(self, request: operations.GetSystemRequest) -> operations.GetSystemResponse:
        r"""Get System
        Get the details of a system.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSystemRequest, base_url, '/systems/{systemSymbol}', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSystemResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSystem200ApplicationJSON])
                res.get_system_200_application_json_object = out

        return res

    
    def get_system_waypoints(self, request: operations.GetSystemWaypointsRequest, security: operations.GetSystemWaypointsSecurity) -> operations.GetSystemWaypointsResponse:
        r"""List Waypoints
        Fetch all of the waypoints for a given system. System must be charted or a ship must be present to return waypoint details.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetSystemWaypointsRequest, base_url, '/systems/{systemSymbol}/waypoints', request)
        headers = {}
        query_params = utils.get_query_params(operations.GetSystemWaypointsRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = utils.configure_security_client(self._client, security)
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSystemWaypointsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSystemWaypoints200ApplicationJSON])
                res.get_system_waypoints_200_application_json_object = out

        return res

    
    def get_systems(self, request: operations.GetSystemsRequest) -> operations.GetSystemsResponse:
        r"""List Systems
        Return a list of all systems.
        """
        base_url = self._server_url
        
        url = base_url.removesuffix('/') + '/systems'
        headers = {}
        query_params = utils.get_query_params(operations.GetSystemsRequest, request)
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, params=query_params, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetSystemsResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetSystems200ApplicationJSON])
                res.get_systems_200_application_json_object = out

        return res

    
    def get_waypoint(self, request: operations.GetWaypointRequest) -> operations.GetWaypointResponse:
        r"""Get Waypoint
        View the details of a waypoint.
        """
        base_url = self._server_url
        
        url = utils.generate_url(operations.GetWaypointRequest, base_url, '/systems/{systemSymbol}/waypoints/{waypointSymbol}', request)
        headers = {}
        headers['Accept'] = 'application/json'
        headers['user-agent'] = f'speakeasy-sdk/{self._language} {self._sdk_version} {self._gen_version}'
        
        client = self._security_client
        
        http_res = client.request('GET', url, headers=headers)
        content_type = http_res.headers.get('Content-Type')

        res = operations.GetWaypointResponse(status_code=http_res.status_code, content_type=content_type, raw_response=http_res)
        
        if http_res.status_code == 200:
            if utils.match_content_type(content_type, 'application/json'):
                out = utils.unmarshal_json(http_res.text, Optional[operations.GetWaypoint200ApplicationJSON])
                res.get_waypoint_200_application_json_object = out

        return res

    